package pubsub

import (
	"context"
	"errors"
)

type SpecialRedisStreamID string

const (
	AutoGeneratedID SpecialRedisStreamID = "*"
	MinimumID       SpecialRedisStreamID = "0"
	MaximumID       SpecialRedisStreamID = "$"
	LastDeliveredID SpecialRedisStreamID = ">"
	ClosestGivenID  SpecialRedisStreamID = "+"

	EventActionKey    = "action"
	EventPayloadKey   = "payload"
	EventTTLKey       = "ttl"
	EventTimestampKey = "timestamp"

	MinimumTTL = 0
)

var (
	ErrUnknownEventAction         = errors.New("unknown event action")
	ErrNoSubscriberConsumed       = errors.New("message not consumed by any subscriber")
	ErrUnsupportedEventPayload    = errors.New("unsupported event payload")
	ErrUnsupportedNormalizeTarget = errors.New("unsupported normalize target")
)

// todo: enable unsubscribe
type UnifiedPubSub interface {

	// Publish publishes a message to a topic
	// If message is map[string]interface{}, its value must be string, int, float64, bool, []byte, or nil.
	Publish(ctx context.Context, event Event) error

	// Subscribe subscribes to given topics.
	// The receiver can get all incoming events from the Events() channel.
	Subscribe(topics ...Topic) error

	// Events returns a channel that receives all incoming events.
	// As long as the internal worker is running, the channel will keep receiving events.
	// The event channel will be closed when Stop() is called.
	Events() <-chan Event

	// Errors returns a channel that receives all errors that occur during the subscription.
	// It is typically designed for Kafka-based pub/sub.
	Errors() <-chan error

	Topics() []string

	Stop() (SyncPoint, error)
}
