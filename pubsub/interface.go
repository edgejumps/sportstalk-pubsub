package pubsub

import (
	"context"
	"errors"
)

type SpecialRedisStreamID string

const (
	AutoGeneratedID SpecialRedisStreamID = "*"
	MinimumID       SpecialRedisStreamID = "0"
	MaximumID       SpecialRedisStreamID = "$"
	LastDeliveredID SpecialRedisStreamID = ">"
	ClosestGivenID  SpecialRedisStreamID = "+"

	EventActionKey    = "action"
	EventPayloadKey   = "payload"
	EventTTLKey       = "ttl"
	EventTimestampKey = "timestamp"

	MinimumTTL = 0
)

var (
	ErrUnknownEventAction         = errors.New("unknown event action")
	ErrNoSubscriberConsumed       = errors.New("message not consumed by any subscriber")
	ErrUnsupportedEventPayload    = errors.New("unsupported event payload")
	ErrUnsupportedNormalizeTarget = errors.New("unsupported normalize target")
)

type UnifiedPubSub interface {

	// Publish publishes a message to a topic
	// If message is map[string]interface{}, its value must be string, int, float64, bool, []byte, or nil.
	Publish(ctx context.Context, event Event) error

	// Subscribe subscribes to given topics
	Subscribe(ctx context.Context, topics ...TargetTopic) (<-chan Event, error)

	// DumpSyncPoint dumps the current sync point to the specified path,
	// so it can be restored later.
	DumpSyncPoint(path string) error
}

type TargetTopic struct {
	// Key is the channel name for pub/sub,
	// or the stream name for streams.
	Key string

	// ID is the last message ID to start reading from.
	// If empty, it will start reading from the beginning.
	// Only used for streams.
	ID string
}
